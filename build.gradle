import edu.wpi.first.gradlerio.GradleRIOPlugin

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.31"
    id "org.jetbrains.kotlin.plugin.serialization" version "1.4.31"
    id "java"
    id "edu.wpi.first.GradleRIO" version "2021.3.1"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.team6502.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

repositories {
    mavenCentral()
    mavenLocal()
    flatDir {
        dirs './opencv/'
    }
    maven {
        url 'https://frcmaven.wpi.edu/artifactory/release/'
    }

}

dependencies {
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)

    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.31"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.0"

    // Enable simulation gui support. Must check the box in vscode to enable support
    // upon debugging
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
    simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, false)


    // Websocket extensions require additional configuration.
//     simulation wpi.deps.sim.ws_server(wpi.platforms.desktop, false)
//     simulation wpi.deps.sim.ws_client(wpi.platforms.desktop, false)

    // Add ntcore-java
    compile "edu.wpi.first.ntcore:ntcore-java:2021.2.2"

    // Add cscore-java
    compile "edu.wpi.first.cscore:cscore-java:2021.2.2"
    compile "edu.wpi.first.cameraserver:cameraserver-java:2021.2.2"
    compile name: 'opencv-347'

    // Add wpiutil-java
    compile "edu.wpi.first.wpiutil:wpiutil-java:2021.2.2"

    // Add ntcore-jni for runtime. We are adding all supported platforms
    // so that our application will work on all supported platforms.
    runtime "edu.wpi.first.ntcore:ntcore-jni:2021.2.2:windowsx86"
    runtime "edu.wpi.first.ntcore:ntcore-jni:2021.2.2:windowsx86-64"
    runtime "edu.wpi.first.ntcore:ntcore-jni:2021.2.2:linuxx86-64"
    runtime "edu.wpi.first.ntcore:ntcore-jni:2021.2.2:linuxraspbian"
    runtime "edu.wpi.first.ntcore:ntcore-jni:2021.2.2:osxx86-64"

    runtime "edu.wpi.first.cscore:cscore-jni:2021.2.2:windowsx86"
    runtime "edu.wpi.first.cscore:cscore-jni:2021.2.2:windowsx86-64"
    runtime "edu.wpi.first.cscore:cscore-jni:2021.2.2:linuxx86-64"
    runtime "edu.wpi.first.cscore:cscore-jni:2021.2.2:linuxraspbian"
    runtime "edu.wpi.first.cscore:cscore-jni:2021.2.2:osxx86-64"
}

// Simulation configuration (e.g. environment variables).
sim {
    // Sets the websocket client remote host.
     envVar "HALSIMWS_HOST", "10.0.0.2"
}

//task copyOpenCVDll(type: Copy) {
//    from('opencv')
//    into('build/image/bin')
//    include('*.dll')
//}
//
//build.dependsOn(copyOpenCVDll)

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}
